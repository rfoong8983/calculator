{"version":3,"sources":["logo.png","components/calculator/calculator_model.js","components/button/button.jsx","components/calculator/calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CalculatorModel","Object","classCallCheck","this","stack","numberBuilder","operatorStack","currentDisplay","lastInput","undefined","ops","+","-","*","/","utilities","AC","performOp","bind","clearAll","val","limitNumberOfDigits","resetStackAfterEquals","preventMultipleDecimals","preventMultipleZeros","replaceFirstZero","concat","push","toString","op","buildNumber","lastInputIsOperation","replaceLastOp","evalStack","lastOpWasMultOrDiv","evalLastTwoNums","l","r","result","pop","addToStack","length","builtNumber","validNumberBuilder","parseFloat","lastChar","getLastCharacter","isDecimal","includes","lastIdx","lastOp","getLastOperator","len","1","2","3","4","5","6","7","8","9","-1","-2","-3","-4","-5","-6","-7","-8","-9","0","Button","props","_this","possibleConstructorReturn","getPrototypeOf","call","model","updateCurrentDisplay","handleClick","assertThisInitialized","buttonVal","isOperation","isEquals","isUtility","appendToBuilder","react_default","a","createElement","id","onClick","React","Component","Calculator","handleKeyPress","event","preventDefault","state","key","isNumber","acPlus","numbersTopSubtr","numbersMidMult","numbersBotDiv","zeroDecEquals","displaySection","newDisplay","setState","_","arr","_this2","map","button_button","className","onKeyDown","slice","App","height","src","logo","alt","calculator_calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bacce8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ad5512d9.png\";","class CalculatorModel {\n    constructor() {\n        this.stack = [0];\n        this.numberBuilder = '';\n        this.operatorStack = [];\n        this.currentDisplay = '0';\n        this.lastInput = undefined;\n        this.ops = {\n            '+': true,\n            '-': true,\n            '*': true,\n            '/': true\n        };\n        this.utilities = {\n            'AC': true\n        };\n\n        this.performOp = this.performOp.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n    }\n\n    appendToBuilder(val) {\n        // builds a number from user input and updates current display\n        if (this.limitNumberOfDigits()) return;\n        this.resetStackAfterEquals();\n        if (this.preventMultipleDecimals(val)) return;\n        if (this.preventMultipleZeros(val)) return;\n\n        if (this.replaceFirstZero(val)) {\n            this.numberBuilder = val;\n        } else {\n            this.numberBuilder = this.numberBuilder.concat(val);\n        }\n        \n        this.currentDisplay = this.numberBuilder;\n        this.lastInput = val;\n    }\n\n    addToStack(val) {\n        // once a number is finished being built, add to the number stack\n        this.stack.push(val);\n        this.currentDisplay = val.toString();\n        this.lastInput = val;\n    }\n\n    clearAll() {\n        this.stack = [];\n        this.operatorStack = [];\n        this.currentDisplay = '0';\n        this.numberBuilder = '';\n        this.lastInput = undefined;\n    }\n\n    performOp(op) {\n        // on performOp, move the built number to the number stack and clear buildNumber\n        this.buildNumber();\n\n        switch(op) {\n\n            case '+':\n            case '-':\n                if (this.lastInputIsOperation()) {\n                    this.replaceLastOp(op);\n                } else {\n                    this.lastInput = op;\n                    this.evalStack();\n                    this.operatorStack.push(op);\n                }\n\n                break;\n\n            case '*':\n            case '/':\n                if (this.lastInputIsOperation()) {\n                    this.replaceLastOp(op);\n                    \n                } else if (this.lastOpWasMultOrDiv()) {\n                    this.evalLastTwoNums();\n\n                    if (this.lastInput !== op) {\n                        this.operatorStack.push(op);\n                        this.lastInput = op;\n                    }\n                } else {\n                    this.lastInput = op;\n                    this.operatorStack.push(op);\n                }\n\n                break;\n\n            case 'Enter':\n            case '=':\n                if (this.lastInputIsOperation()) {\n                    this.replaceLastOp(op);\n                }\n                this.evalStack();\n                this.lastInput = op;\n                break;\n            default:\n                return;\n        }\n    }\n\n    evalLastTwoNums() {\n        const op = this.operatorStack.pop();\n        let l;\n        let r;\n        let result;\n\n        r = this.stack.pop();\n        l = this.stack.pop();\n\n        switch(op) {\n            case '+':\n                result = l + r;\n                break;\n            case '-':\n                result = l - r;\n                break;\n            case '*':\n                result = l * r;\n                break;\n            case '/':\n                result = (l / r);\n                break;\n            default:\n                return;\n        }\n\n        this.addToStack(result);\n        this.currentDisplay = result.toString();\n    }\n\n    evalStack() {\n        while (this.stack.length > 1 && this.operatorStack.length) {\n            this.evalLastTwoNums();\n        }\n    }\n\n\n    // helper functions\n\n    buildNumber() {\n        const builtNumber = this.numberBuilder;\n        \n        if (builtNumber === '.') {\n            if (this.stack[0] !== 0) this.stack.push(0);\n        } else if (this.validNumberBuilder()) {\n            this.stack.push(parseFloat(builtNumber));\n        }\n\n        this.numberBuilder = '';\n    }\n\n    validNumberBuilder() {\n        if (!this.numberBuilder.length) return false;\n        return true;\n    }\n\n    limitNumberOfDigits() {\n        if (this.numberBuilder.length === 18) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    preventMultipleDecimals(val) {\n        const lastChar = this.getLastCharacter();\n        if ((this.isDecimal(lastChar) || this.numberBuilder.includes('.')) && this.isDecimal(val)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    resetStackAfterEquals() {\n        if (this.lastInput === '=') this.stack = [0];\n    }\n\n    getLastCharacter() {\n        let lastIdx = 0;\n        if (this.numberBuilder.length) {\n            lastIdx = this.numberBuilder.length - 1;\n        }\n        return this.numberBuilder[lastIdx];\n    }\n\n    getLastOperator() {\n        if (this.operatorStack.length === 0) {\n            return null;\n        } else {\n            return this.operatorStack[this.operatorStack.length - 1];\n        }\n    }\n\n    lastOpWasMultOrDiv() {\n        const lastOp = this.getLastOperator();\n        return lastOp === '*' || lastOp === '/';\n    }\n\n    preventMultipleZeros(val) {\n        const len = this.numberBuilder.length;\n        const lastChar = this.getLastCharacter();\n\n        if (val === '0' && len === 1 && lastChar === '0') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    replaceFirstZero(val) {\n        const len = this.numberBuilder.length;\n        const lastChar = this.getLastCharacter();\n        const validNums = {\n            // does not include 0\n            '1': true, '2': true, '3': true,\n            '4': true, '5': true, '6': true,\n            '7': true, '8': true, '9': true,\n            '-1': true, '-2': true, '-3': true,\n            '-4': true, '-5': true, '-6': true,\n            '-7': true, '-8': true, '-9': true\n        }\n        \n        if (val in validNums && len === 1 && lastChar === '0') {\n            return true;\n        } \n    }\n\n    replaceLastOp(val) {\n        this.operatorStack.pop();\n        this.operatorStack.push(val);\n        this.lastInput = val;\n    }\n\n    isNumber(val) {\n        // created so handleKeyPress only accepts numbers\n        const nums = {\n            '1': true, '2': true, '3': true, \n            '4': true, '5': true, '6': true, \n            '7': true, '8': true, '9': true, '0': true\n        }\n\n        return val in nums;\n    }\n    \n    isDecimal(val) { return val === '.'; }\n    isUtility(val) { return val in this.utilities; }\n    isOperation(val) { return val in this.ops; }\n    isEquals(val) { return val === '=' || val === 'Enter'; } // split out from operations for calc logic\n    lastInputIsOperation() { return this.lastInput in this.ops; }\n}\n\nexport default CalculatorModel;","import React from 'react';\n\nclass Button extends React.Component {\n    constructor(props) {\n        super(props);\n        this.val = props.val;\n        this.model = props.model;\n        this.updateCurrentDisplay = props.updateCurrentDisplay;\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        // either perform an operation, clear stacks, or append to the number being built\n        const buttonVal = this.val;\n        const model = this.model;\n\n        if (model.isOperation(buttonVal) || model.isEquals(buttonVal)) {\n            model.performOp(buttonVal);\n        } else if (model.isUtility(buttonVal)) {\n            model.clearAll(buttonVal);\n        } else {\n            model.appendToBuilder(buttonVal);\n        }\n        \n        // update current display on button click\n        this.updateCurrentDisplay();\n    }\n\n    render() {\n        return(\n            <button id={`button__${this.val}`} onClick={this.handleClick}>\n                <p>{this.val}</p>\n            </button>\n        )\n    }\n}\n\nexport default Button;","import React from 'react';\nimport CalculatorModel from './calculator_model';\nimport Button from '../button/button';\nimport '../../stylesheets/calculator.css';\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            model: new CalculatorModel(),\n            currentDisplay: 0\n        };\n\n        // Created separate arrays to organize button positions;\n        this.acPlus = ['AC', '+'];\n        this.numbersTopSubtr = ['7', '8', '9', '-'];\n        this.numbersMidMult = ['4', '5', '6', '*'];\n        this.numbersBotDiv = ['1', '2', '3', '/'];\n        this.zeroDecEquals = ['0', '.', '='];\n\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.displaySection = this.displaySection.bind(this);\n        this.updateCurrentDisplay = this.updateCurrentDisplay.bind(this);\n    }\n\n    updateCurrentDisplay() {\n        const model = this.state.model;\n        let newDisplay = model.currentDisplay;\n        if (newDisplay[0] === '.') newDisplay = '0' + newDisplay;\n\n        this.setState(_ => {\n            return {currentDisplay: newDisplay};\n        });\n    }\n\n    handleKeyPress = (event) => {\n        // either perform an operation, clear stacks, or append to the number being built\n        // do nothing for invalid keys e.g., shift\n        event.preventDefault();\n        const model = this.state.model;\n        if (event.key === 'Enter') event.key = '=';\n        if (event.key === 'Backspace') event.key = 'AC';\n        \n        if (model.isOperation(event.key) || model.isEquals(event.key)) {\n            model.performOp(event.key);\n        } else if (model.isUtility(event.key)) {\n            model.clearAll(event.key);\n        } else if (model.isNumber(event.key)) {\n            model.appendToBuilder(event.key);\n        } else {\n            return;\n        }\n\n        // update current display on key press\n        this.updateCurrentDisplay();\n    }\n    \n\n    displaySection(arr) {\n        const model = this.state.model;\n\n        return arr.map(val => (\n            <Button\n                model={model}\n                updateCurrentDisplay={this.updateCurrentDisplay}\n                val={val}\n                key={val}\n            />\n        ));\n    }\n\n    render() {\n        return (\n            <div className=\"calculator__wrapper\" onKeyDown={this.handleKeyPress}>\n                <div className=\"calculator__screen\">\n                    <p>{this.state.currentDisplay}</p>\n                </div>\n\n                <div className=\"calculator__buttonRowWrapper\">\n                    <div className=\"calculator__acPlus\">\n                        {this.displaySection(this.acPlus)}\n                    </div>\n\n                    <div className=\"calculator__columnWrapper\">\n                        <div className=\"calculator__numbersTopSubtr\">\n                            {this.displaySection(this.numbersTopSubtr.slice(0,2))}\n                        </div>\n                        <div className=\"calculator__numbersTopSubtr\">\n                            {this.displaySection(this.numbersTopSubtr.slice(2))}\n                        </div>\n                    </div>\n\n                    <div className=\"calculator__columnWrapper\">\n                        <div className=\"calculator__numbersMidMult\">\n                            {this.displaySection(this.numbersMidMult.slice(0,2))}\n                        </div>\n                        <div className=\"calculator__numbersMidMult\">\n                            {this.displaySection(this.numbersMidMult.slice(2))}\n                        </div>\n                    </div>\n\n                    <div className=\"calculator__columnWrapper\">\n                        <div className=\"calculator__numbersBotDiv\">\n                            {this.displaySection(this.numbersBotDiv.slice(0,2))}\n                        </div>\n                        <div className=\"calculator__numbersBotDiv\">\n                            {this.displaySection(this.numbersBotDiv.slice(2))}\n                        </div>\n                    </div>\n\n                    <div className=\"calculator__columnWrapper\">\n                        <div className=\"calculator__zeroDecEquals\">\n                            {this.displaySection(this.zeroDecEquals.slice(0,1))}\n                        </div>\n                        <div className=\"calculator__zeroDecEquals\">\n                            {this.displaySection(this.zeroDecEquals.slice(1))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/calculator/calculator';\nimport './stylesheets/App.css';\nimport logo from './logo.png'\n\nfunction App() {\n  return (\n    <div className=\"calculator__container\">\n      <div className=\"calculator__logoWrapper\">\n        <div><p className=\"calculator__logoDescr\">TI-80-poor</p></div>\n        <div className=\"calculator__logo\">\n          <img height=\"15px\" src={logo} alt=\"CA\" /><p className=\"calculator__logoDescr\">California Instruments</p>\n        </div>\n      </div>\n      \n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}